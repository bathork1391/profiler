
PLAY [vms] *********************************************************************

TASK [Gathering Facts] *********************************************************
[1;35mcore/2.17/reference_appendices/interpreter_discovery.html for more information.[0m
[0;32mok: [vm1][0m

TASK [Ensure binary directory exists] ******************************************
[0;32mok: [vm1][0m

TASK [Ensure script directory exists] ******************************************
[0;32mok: [vm1][0m

TASK [Ensure results directory exists] *****************************************
[0;33mchanged: [vm1][0m

TASK [Ensure test result subdirectories exist] *********************************
[0;33mchanged: [vm1] => (item=times)[0m

TASK [Copy binaries to VM] *****************************************************
[0;32mok: [vm1] => (item=trisolv_3.wasm)[0m

TASK [Copy binaries to VM (native)] ********************************************
[0;32mok: [vm1] => (item=trisolv_3_native)[0m

TASK [Set execute permission on copied binaries] *******************************
[0;32mok: [vm1] => (item=trisolv_3.wasm)[0m

TASK [Set execute permission on copied binaries (native)] **********************
[0;32mok: [vm1] => (item=trisolv_3_native)[0m

TASK [Copy scripts to VM] ******************************************************
[0;32mok: [vm1] => (item=times.py)[0m

TASK [Run tests on VM] *********************************************************
[0;33mchanged: [vm1] => (item=[3, {'name': 'times.py', 'active': True}])[0m

TASK [Verify result files exist on VM] *****************************************
[0;32mok: [vm1] => (item=[3, {'name': 'times.py', 'active': True}])[0m

TASK [Debug result files] ******************************************************
[0;36mskipping: [vm1] => (item={'changed': False, 'stat': {'exists': False}, 'invocation': {'module_args': {'path': '/root/profiler/results/times/trisolv_3_times_.json', 'follow': False, 'get_checksum': True, 'get_mime': True, 'get_attributes': True, 'checksum_algorithm': 'sha1'}}, 'failed': False, 'test_item': [3, {'name': 'times.py', 'active': True}], 'ansible_loop_var': 'test_item'}) [0m
[0;36mskipping: [vm1][0m

TASK [Collect test results] ****************************************************
[0;31mfailed: [vm1] (item=[3, {'name': 'times.py', 'active': True}]) => {"ansible_loop_var": "test_item", "changed": false, "msg": "the remote file does not exist, not transferring, ignored", "test_item": [3, {"active": true, "name": "times.py"}]}[0m

PLAY RECAP *********************************************************************
[0;31mvm1[0m                        : [0;32mok=12  [0m [0;33mchanged=3   [0m unreachable=0    [0;31mfailed=1   [0m [0;36mskipped=1   [0m rescued=0    ignored=0   
